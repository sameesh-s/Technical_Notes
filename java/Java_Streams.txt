Streams
=======
* Iterators imply a specific traversal strategy and prohibit efficient concurrent execution.
* You can create streams from collections, arrays, generators, or iterators.
* Use filter to select elements and map to transform elements.
* Other operations for tranforming streams include limit, distinct, and sorted.
* To obtain a result from a stream, use a reduction operator such as count, max, min, findFirst, or findAny. Some of these methods return an Optional value.
* The Optional type is intended as a safe alternative to working with null values. To use it safly, take advatage of the ifPresent and orElse methods.
* You can collect stream results in collections, arrays, strings, or maps.
* The groupingBy and partitioningBy methods of the Collectors class allow you to split the contents of a stream into groups, and to obtain a result for each group.
* There are specialized streams for the primitive types int, long, and double.
* When you work with parallel streams, be sure to avoid side effects, and consider giving up ordering constraints.

A stream seems superficially similar to a collection, allowing you to transform and retrieve data. But there are significant differences.
1. A stream does not store its elements. They may be stored in an underlaying collection or generated on demand.
2. Stream operations don't mutate their source. Instead, they return new streams that hold the result.
3. Stream operations are lazy when possible. This means they are not executed until their result is needed. For example, if you only ask for the first five long words instead of counting them all, then the filter method will stop filtering after the fifth match. As a consequence, you can even have infinite streams!

