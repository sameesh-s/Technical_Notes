Java 8
------
new packages 
  java.util.function
  java.util.stream

Functional Interface
--------------------
An Interface that contains at most one abstract function.
Represent abstract concepts such as 
Functions
Actions
Predicates

No datatype decleration Lambda expression will inferred the data type.

1. Predicate
------------
takes one argument, return a Boolean
override test method
eg:
Predicate<String> stringLen = (s)-> s.length() < 10;
System.out.println(stringLen.test("Apples") + " -Apples is less than 10");

2.Consumer
----------
accepts single argument with no return value
eg:
Consumenr<String> consumerStr = (s) -> System.out.println(s.toLowerCase());
consomerStr.accept("ASSlkdiiiii");

3.Function
----------
Transfer one value to another.
accepts one argument and produces a result
Function<Integer, String> converter = (num)->Integer.toString(num);
System.out.println("length of 26: " + converter.apply(26).length();

4.Supplier 
----------
represents a supplier of results
no arguments.
Produces a value of type.
Supplier<String> s = ()->"Java is fun";
System.out.println(s.get());

5.Unary Operator
----------------
Single argument with a return value
UnaryOperator<String> add = (msg)-> msg.toUpperCase;
System.out.println("Add  1, 2 : " + add.apply(10,25));

6.BinaryOperator
----------------
takes two arguments and returns one
BinaryOperator<Integer> add = (a,b)-> a + b;
System.out.println("ADD 1 + 2 : " + add.apply(1, 2));
